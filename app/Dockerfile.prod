###########
# BUILDER #
###########

# pull official base image
# NOTE: 自走プログラマー82:Docker公式のPythonを使う
#       https://jisou-programmer.beproud.jp/プロジェクト構成/82-Docker公式のPythonを使う.html
# syntax=docker/dockerfile:1
# NOTE: as builderって何？
# NOTE: FROM python:3.12.2 を使うようにした
FROM python:3.12.2 as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE 1

# install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc

# lint
RUN pip install --upgrade pip
RUN pip install flake8==6.0.0
# TODO: 全てのディレクトリを対象としているため
#       venvを作成した場合、ディレクトリまで対象となる = venvディレクトリを除外する必要がある
#       Dockerなので無くても良いとも思うし、
#       GitHub Actionsでruffを実行して、こちらのlintは削除する、でも良いと思う
# W503はflake8のデフォルトのignoreに入っているらしいので追加
# https://qiita.com/nakamasato/items/eecd50dcaa1797846e62
# TODO: 自分でも調べる
COPY . /usr/src/app/
RUN flake8 --ignore=E501,F401,W503 .

# install python dependencies
COPY requirements/requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.12.2

# create directory for the app user
# 最初の `WORKDIR /usr/src/app` とは何が違うの？
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system app && adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
RUN mkdir $APP_HOME/mediafiles
WORKDIR $APP_HOME

# install dependencies
# NOTE: netcatは何？
#       参考にしたままだと、 E: Package 'netcat' has no installation candidate となってしまう
#       RUN apt-get update && apt-get install -y --no-install-recommends netcat から `netcat-traditional` に変更
#       https://stackoverflow.com/questions/75052023/package-netcat-has-no-installation-candidate-ubuntu-22-10-kinetic-redmail
RUN apt-get update && apt-get install -y --no-install-recommends netcat-traditional
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# NOTE: tailwindcssを利用するためにnodeをインストール
# TODO: build出来なくなるケースがあったので、再発した場合は対応する
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get update && \
    apt-get install -y nodejs

# copy entrypoint.sh
# NOTE: entrypoint.prod.sh を作成しても良いのかも？
COPY ./entrypoint.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.sh
RUN chmod +x  $APP_HOME/entrypoint.sh

# copy project
COPY .. $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run entrypoint.sh
ENTRYPOINT ["/home/app/web/entrypoint.sh"]
